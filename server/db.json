{
  "users": [
    {
      "id": 1,
      "role": "admin",
      "email": "george.bluth@reqres.in",
      "username": "georgegeorge",
      "password": "qwerty1",
      "first_name": "George",
      "last_name": "Bluth",
      "avatar": "https://reqres.in/img/faces/1-image.jpg"
    },
    {
      "id": 2,
      "role": "user",
      "email": "janet.weaver@reqres.in",
      "username": "janet",
      "password": "qwerty2",
      "first_name": "Janet",
      "last_name": "Weaver",
      "avatar": "https://reqres.in/img/faces/2-image.jpg"
    },
    {
      "id": 3,
      "role": "user",
      "email": "emma.wong@reqres.in",
      "username": "emma",
      "password": "qwerty3",
      "first_name": "Emma",
      "last_name": "Wong",
      "avatar": "https://reqres.in/img/faces/3-image.jpg"
    },
    {
      "id": 4,
      "role": "user",
      "email": "eve.holt@reqres.in",
      "username": "eve",
      "password": "qwerty4",
      "first_name": "Eve",
      "last_name": "Holt",
      "avatar": "https://reqres.in/img/faces/4-image.jpg"
    },
    {
      "id": 5,
      "role": "user",
      "email": "charles.morris@reqres.in",
      "username": "charles",
      "password": "qwerty5",
      "first_name": "Charles",
      "last_name": "Morris",
      "avatar": "https://reqres.in/img/faces/5-image.jpg"
    },
    {
      "id": 6,
      "role": "user",
      "email": "tracey.ramos@reqres.in",
      "username": "tracey",
      "password": "qwerty6",
      "first_name": "Tracey",
      "last_name": "Ramos",
      "avatar": "https://reqres.in/img/faces/6-image.jpg"
    },
    {
      "email": "charles.morris@reqres.in",
      "role": "user",
      "username": "charles123",
      "password": "qwerty5",
      "first_name": "Charles",
      "last_name": "Morris",
      "avatar": "https://reqres.in/img/faces/5-image.jpg",
      "id": 7
    },
    {
      "id": 1697367682821,
      "role": "user",
      "first_name": "иван",
      "last_name": "Иванов",
      "email": "alextext04@mail.ru",
      "username": "alexxx",
      "password": "123",
      "avatar": "/uploads/1697367682325-1 Ð²Ð°ÑÐ¸Ð°Ð½Ñ.png"
    },
    {
      "id": 1697367849134,
      "role": "user",
      "first_name": "Сергей",
      "last_name": "Фоменко",
      "email": "kilkoo@mail.ru",
      "username": "sergo",
      "password": "rtyyqe",
      "avatar": "/uploads/1697367848756-1-image.jpg"
    },
    {
      "id": 1697527674055,
      "role": "user",
      "first_name": "иван",
      "last_name": "Иванов",
      "email": "alextext04@mail.ru",
      "username": "alexxx",
      "password": "123445555",
      "avatar": "/uploads/1697527673879-5-image.jpg"
    },
    {
      "id": 1697641441908,
      "role": "user",
      "first_name": "Максим",
      "last_name": "Орашанов",
      "email": "jidtirar@gmail.com",
      "username": "7788",
      "password": "1234",
      "avatar": "/uploads/1697641440751-ÐÐµÐ· Ð½Ð°Ð·Ð²Ð°Ð½Ð¸Ñ.png"
    },
    {
      "id": 1697642304795,
      "role": "user",
      "first_name": "Максим",
      "last_name": "Орашанов",
      "email": "jidtirar@gmail.com",
      "username": "6544",
      "password": "4353215",
      "avatar": "/uploads/1697642303218-ÐÐµÐ· Ð½Ð°Ð·Ð²Ð°Ð½Ð¸Ñ.png"
    }
  ],
  "posts": [
    {
      "id": 4,
      "userId": 5,
      "title": "Бинарная граница ABI и C++",
      "body": "<p>Вопрос ABI (Application Binary Interface), бинарной границы и бинарной совместимости в C++, раскрыт на просторах интернета не так хорошо как хотелось бы. Особенно сложно в его изучении приходится новичкам, потому что эта тема связана со множеством деталей нарочно скрытой от глаз программиста имплементации языка.<br><br>Приправив всё авторскими (и не только) мемами и юморесками за 300, я пострался привнести больше ясности об этой теме в этой статье.</p>\n<h3>Подробнее о статье</h3>\n<p>Мир С++ многое скрывает от глаз программиста. Это свойство языка &mdash; обоюдоострый меч, который с одной стороны позволяет уменьшить порог входа, но в то же время является препятствием при написании программ, уходящих дальше стандартного примера.<br><br>В первой части статьи я поделюсь теоретическими знаниями о том, что такое ABI и бинарная граница, и какие проблемы могут возникнуть при её пересечении.<br><br>Во второй части статьи я дам прикладные советы с примерами кода о том, как мы можем сделать переход бинарной границы безопаснее, изменив дизайн функций, и как при этом можно передавать информацию об ошибках из одного модуля в другой.<br><br>В рамках всей статьи будут рассмотрены темы: системный стек, системные регистры, динамическая память, детали механизма виртуальных функций, стандарт С++ и реальная имплементация, copy elision при линковке библиотек, шаблоны и&nbsp;<em><abbr class=\"habraabbr\" style=\"transition: opacity 0.2s ease-in-out 0s, color 0.2s ease-in-out 0s, text-decoration 0.2s ease-in-out 0s, background-color 0.2s ease-in-out 0s, -webkit-text-decoration 0.2s ease-in-out 0s; quotes: '&laquo;' '&raquo;'; border: 1px solid rgba(84, 142, 170, 0.3); cursor: help; text-decoration: none; background-color: rgba(84, 142, 170, 0.1); border-radius: 4px; padding: 1px 4px;\" data-title=\"&lt;p&gt;one definition rule&lt;/p&gt;\" data-abbr=\"ODR\" data-text-title=\"one definition rule\">ODR&nbsp;</abbr>violation.</em></p>\n<p>&nbsp;</p>\n<h2>1. Необходимая теория</h2>\n<p>Прежде чем приступить к разбору бинарной границы и ABI, давайте условимся насчёт обозначения, что я имею ввиду в данной статье, когда говорю&nbsp;<strong><em>программный модуль.</em></strong></p>\n<p>Под&nbsp;<strong><em>программным модулем</em></strong>&nbsp;я понимаю некоторый артефакт, который мы получаем после компиляции нашей программы, вроде: статической/динамической библиотеки, или исполняемого файла.<br><br>Когда я говорю программный модуль в этой статье, я&nbsp;<strong>не</strong>&nbsp;подразумеваю поддержку модулей из C++20.</p>\n<p><a id=\"1_1\" class=\"anchor\" name=\"1_1\"></a></p>\n<h3>1.1. Что такое бинарная граница</h3>\n<p>В моём понимании, это место, находящееся на границах инструкций двух программных модулей.<br><br>Возможно, проще понять что такое бинарная граница, поняв когда мы её переходим. К примеру, переход бинарной границы происходит в тот момент, когда наш поток, исполняющий код файла&nbsp;<code>a.cpp</code>, который был скомпилярован в исполняемый файл&nbsp;<code>a.exe</code>, вызывает функцию,&nbsp;<em>определённую</em>&nbsp;в файле&nbsp;<code>b.cpp</code>&nbsp;, скомпилированную в библиотеку&nbsp;<code>b.dll</code>&nbsp;(или&nbsp;<code>b.lib</code>), которую исполняемый файл:</p>\n<ol>\n<li>\n<p>Загрузил уже после своего запуска (в случае динамической линковки, т.е. использования динамической библиотеки .<code>so</code>/<code>.dll</code>),</p>\n</li>\n<li>\n<p>Или же эта библиотека была встроена в исполняемый файл на этапе компиляции этого исполняемого файла (в случае статической линковки, т.е. использования статической библиотеки&nbsp;<code>.a</code>/<code>.lib</code>),</p>\n</li>\n<li>\n<p>А ещё есть комбинированный вариант, когда у нас есть статическая библиотека, предоставляющая таблицу экспорта символов из динамической библиотеки.</p>\n</li>\n</ol>\n<p>Причина проблем при пересечении бинарной границы заключается в том, что два программных модуля могут иметь разные правила по которым в них работают базовые механизмы языка.</p>",
      "announcement": "Древняя тайна, о которой молчат",
      "category": "short",
      "views": 233,
      "likes": 89,
      "date": "2023-09-11",
      "image": "/uploads/1697637743341-ddf49e540a9ba624babc076f6d496732.png"
    },
    {
      "id": 5,
      "userId": 1,
      "title": "ECMASCRIPT: что это такое?",
      "body": "<p>Встраиваемый <strong>расширяемый </strong>язык программирования, используемый в качестве основы для построения других скриптовых языков. ECMAScript стандартизирован международной организацией ECMA в спецификации ECMA-262.<br><br></p>",
      "announcement": "Краткий обзор",
      "category": "short",
      "views": 70,
      "likes": 13,
      "date": "2023-10-05",
      "image": "/uploads/1697641342662-ÐÐµÐ· Ð½Ð°Ð·Ð²Ð°Ð½Ð¸Ñ.png"
    },
    {
      "id": 6,
      "userId": 1,
      "title": "Как я проектирую и разрабатываю расширения Python на Rust",
      "body": "<p>Вы наверняка видели множество статей на тему \"Python, Rust - производительность, бла-бла-бла... Вот, реализуем foo2plus2\". Вся беда в том, что все эти статьи демонстрируют очень простые примеры уровня \"hello-world\". Напротив, в этой статье я хочу рассказать о том, как я проектирую комплексные расширения и почему я принимаю те или иные проектные1 решения.</p>\n<blockquote>\n<p>Статья является переводом и адаптацией моей же&nbsp;<a href=\"https://medium.com/@kudryavtsev_ia/how-i-design-and-develop-real-world-python-extensions-in-rust-2abfe2377182?source=friends_link&amp;sk=24c0727706dd86d564aa683084afed79\" rel=\"noopener noreferrer nofollow\">статьи</a>&nbsp;на Medium. Возможно, кто-то предпочтет прочесть в оригинале - ссылка позволяет прочитать без подписки.</p>\n</blockquote>\n<p>На данный момент я написал четыре библиотеки для Python на Rust (<a href=\"https://github.com/insight-platform/FFmpeg-Input\" rel=\"noopener noreferrer nofollow\"><u>1</u></a>,&nbsp;<a href=\"https://github.com/insight-platform/Similari\" rel=\"noopener noreferrer nofollow\"><u>2</u></a>,&nbsp;<a href=\"https://github.com/insight-platform/savant-rs\" rel=\"noopener noreferrer nofollow\"><u>3</u></a>,&nbsp;<a href=\"https://github.com/insight-platform/RocksQ\" rel=\"noopener noreferrer nofollow\"><u>4</u></a>) и приобрел определенный опыт, но все еще не чувствую, что достиг той квалификации, которая позволяет утверждать, что правильно, а что нет. Некоторые из моих подходов вдохновлены другими людьми, другие являются результатом анализа и долгих попыток рефакторинга кода, и все же, я не уверен, что мои решения являются лучшими из возможных.</p>\n<p>Кроме того, я не очень опытный разработчик на Rust, поэтому в моем коде могут встречаться забавные вещи - будьте готовы к фейспалмам, если вы сильно прошарены в Rust.</p>\n<h2>Благодарности</h2>\n<p>Если порыться в моих репозиториях, то можно обнаружить эволюцию подхода к разработке расширений Rust для Python: например, в&nbsp;<a href=\"https://github.com/insight-platform/Similari\" rel=\"noopener noreferrer nofollow\"><u>Similari</u></a>&nbsp;многие решения странные, но именно в ходе данного проекта у меня произошел существенный скачок вперед, когда я получил PR от&nbsp;<a href=\"https://github.com/andreytkachenko\" rel=\"noopener noreferrer nofollow\">Андрея Ткаченко</a>.</p>\n<p>Другая команда продемонстрировала, как использовать Sphinx для документирования расширений, и я написал об этом в соответствующей&nbsp;<a href=\"https://medium.com/inside-in-sight/documenting-native-python-extensions-made-with-rust-and-pyo3-227aff68e481\" rel=\"noopener noreferrer nofollow\">статье</a>. Я провел несколько часов, погружаясь в среду Manylinux и особенности ее использование в Maturin GitHub Action, в результате чего появилась&nbsp;<a href=\"https://medium.com/inside-in-sight/building-portable-native-python-extensions-with-rust-pyo3-and-maturin-3c1a1634d324\" rel=\"noopener noreferrer nofollow\">статья</a>, демонстрирующая, как создавать переносимые расширения Rust для Python с помощью GitHub CI и сборке в Docker.</p>\n<p>Хочу сказать \"спасибо\" всем тем, кто помог мне продвинуться в данной теме: все вы проделали огромную работу, создавая свой код без общепринятых подходов и обширной документации.</p>\n<p>Благодарю следующие коллективы и людей за участие в моем прогрессе:</p>\n<ul>\n<li>\n<p>PyO3&nbsp;<a href=\"https://github.com/PyO3/pyo3\" rel=\"noopener noreferrer nofollow\"><u>team</u></a>&nbsp;&mdash; за их усилия по предоставлению разработчикам превосходного инструмента для создания расширений Python на Rust;</p>\n</li>\n<li>\n<p><a href=\"https://github.com/andreytkachenko\" rel=\"noopener noreferrer nofollow\"><u>Andrei Tkachenko</u></a>&nbsp;&mdash; за демонстрацию возможностей использования&nbsp;<code>transmute</code>&nbsp;при разработке расширений Python на Rust и за огромный вклад в развитие Similari;</p>\n</li>\n<li>\n<p>Pola.rs project&nbsp;<a href=\"https://www.pola.rs/\" rel=\"noopener noreferrer nofollow\"><u>team</u></a>&nbsp;&mdash; идеи по дизайну и фрагменты кода;</p>\n</li>\n<li>\n<p>Pometry/Raphtory&nbsp;<a href=\"https://github.com/Pometry/Raphtory\" rel=\"noopener noreferrer nofollow\"><u>team</u></a>&nbsp;&mdash; за идеи по документированию расширений Python на Rust.</p>\n</li>\n</ul>\n<h2>Предварительные условия</h2>\n<p>Это не вводная статья. Я предполагаю, что вы знаете Rust и можете написать расширение типа \"hello world\" для Python на Rust с помощью PyO3. Я предполагаю, что вы знаете, что такое GIL и как он работает.</p>\n<h2>Специфика модели управления памятью</h2>\n<p>Rust и Python подходят по разному к управлению памятью, что иногда превращает проектирование сложных структур данных и способов их взаимодействия между собой в нетривиальную задачу: в Rust модель памяти основана на владении, а в Python - на ссылках на объекты в куче.</p>\n<p>Наиболее близкой структурой, представляющей модель памяти Python, в Rust является:</p>\n<pre><code class=\"rust hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">WrappedMutex</span></span> = Arc&lt;Mutex&lt;T&gt;&gt;;\n<span class=\"hljs-comment\">// or</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">WrappedRwLock</span></span> = Arc&lt;RwLock&lt;T&gt;&gt;;</code></pre>\n<p>Однако, в Python вышеуказанный мьютекс представлен GIL - глобальная блокировка, общая для всех объектов в рантайме, в то время как в Rust возможно осуществлять изолированную блокировку только нужных для работы объектов.</p>\n<p>Одна из ключевых проблем при проектировании объектной модели совместимой с Python заключается в том, что передать ссылку (<code>&amp;mut</code>&nbsp;или&nbsp;<code>&amp;</code>) из Rust в Python невозможно: для этого необходимо использовать&nbsp;<code>Arc&lt;T&gt;</code>.</p>\n<p>В PyO3 реализованы некоторые решения, позволяющие передавать аллоцированные в Python объекты в Rust-функции по ссылке, но обратная операция невозможна: вы не можете просто сохранить ссылку на Rust-объект в памяти Python. PyO3 поддерживает передачу объектов Rust в Python по значению, оборачивая их в объекты Python (<code>PyObject</code>).</p>\n<p>Понимание моделей памяти и их особенностей их взаимодействия между собой важно для правильного проектирования кода, особенно если он освобождает GIL, поскольку освобождение GIL требует от объекта реализации трейта&nbsp;<code>Ungil</code>, который, по сути,&nbsp;<a href=\"https://github.com/PyO3/pyo3/blob/b03c4cb33cc30da738270a4db8322d5d9b74fb8c/src/marker.rs#L182\" rel=\"noopener noreferrer nofollow\">является</a>&nbsp;<code>Send</code>.</p>\n<p>Если вы хотите одновременно использовать объект в Python и Rust, необходимо использовать обертку для него на базе&nbsp;<code>Arc&lt;T&gt;</code>&nbsp;или&nbsp;<code>Arc&lt;Mutex&lt;T&gt;&gt;.</code></p>\n<p>Пример объекта, используемого только в Python:</p>\n<pre><code class=\"rust hljs\"><span class=\"hljs-keyword\">use</span> pyo3::prelude::*;\n\n<span class=\"hljs-meta\">#[pyclass]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Object</span></span> {\n    x: <span class=\"hljs-built_in\">i32</span>,\n}\n\n<span class=\"hljs-meta\">#[pymethods]</span>\n<span class=\"hljs-keyword\">impl</span> Object {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">inc</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">self</span>.x += <span class=\"hljs-number\">1</span>;\n    }\n}</code></pre>\n<p>Ссылка на экземпляр данного класса может быть временно передана в функцию Rust, вызываемую из Python, например:</p>\n<pre><code class=\"rust hljs\"><span class=\"hljs-meta\">#[pyfunction]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">callme</span></span>(o: &amp;<span class=\"hljs-keyword\">mut</span> Object) {\n    o.inc();\n}</code></pre>\n<p>Или вы можете передать объект в Rust как копию (<code>Clone</code>) - объект в пространстве памяти Python не пропадет:</p>\n<pre><code class=\"rust hljs\"><span class=\"hljs-meta\">#[pyfunction]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">callme</span></span>(<span class=\"hljs-keyword\">mut</span> o: Object) {\n    o.inc();\n}</code></pre>",
      "announcement": "123",
      "category": "short",
      "views": 150,
      "likes": 67,
      "date": "2023-10-16",
      "image": "/uploads/1697637995321-2-5.jpg"
    },
    {
      "userId": 1,
      "title": "Заглушечный пост",
      "body": "Текст",
      "announcement": "Анонс",
      "category": "short",
      "views": 0,
      "likes": 0,
      "date": "2023-10-18",
      "image": "https://cdnn21.img.ria.ru/images/151683/46/1516834602_0:161:3071:1888_1920x0_80_0_0_00f3d0ffc928e8b53c892093bbe5cac7.jpg",
      "id": 8
    },
    {
      "id": 9,
      "userId": 1,
      "title": "Заголовок",
      "body": "Текст",
      "announcement": "Анонсу",
      "category": "short",
      "views": 0,
      "likes": 0,
      "date": "2023-10-18",
      "image": "/uploads/1697638432040-organizacionnaya_scheme.drawio.png"
    },
    {
      "title": "123",
      "body": "<blockquote>\n<p style=\"text-align: center;\"><strong>413443214 в<em>ыфа</em></strong></p>\n</blockquote>",
      "announcement": "53215",
      "category": "short",
      "views": 0,
      "likes": 0,
      "date": "2023-10-18",
      "image": "/uploads/1697641528833-ÐÐµÐ· Ð½Ð°Ð·Ð²Ð°Ð½Ð¸Ñ.png",
      "id": 10
    },
    {
      "userId": 1,
      "title": "Заголовок",
      "body": "Текст",
      "announcement": "Анонс",
      "category": "short",
      "views": 0,
      "likes": 0,
      "date": "2023-10-18",
      "image": "https://cdnn21.img.ria.ru/images/151683/46/1516834602_0:161:3071:1888_1920x0_80_0_0_00f3d0ffc928e8b53c892093bbe5cac7.jpg",
      "id": 11
    },
    {
      "userId": 2,
      "title": "4124412",
      "body": "<div style=\"text-align: justify;\">fa<em>sdfda</em>d<strong>sggdasgdgds</strong></div>\n<p>&nbsp;</p>",
      "announcement": "253215",
      "category": "short",
      "views": 0,
      "likes": 0,
      "date": "2023-10-18",
      "image": "https://cdnn21.img.ria.ru/images/151683/46/1516834602_0:161:3071:1888_1920x0_80_0_0_00f3d0ffc928e8b53c892093bbe5cac7.jpg",
      "id": 12
    }
  ],
  "comments": []
}